---
import BaseLayout from "@components/base/BaseLayout.astro";
import PageHeader from "@components/common/PageHeader.astro";
import type { PoetryEntry } from "@/types";
import { formatDate } from "@lib/formatDate";
import { plainify } from "@lib/textConverter";
import { Image } from "astro:assets";
import DefaultImage from "./DefaultImage.astro";

interface Props {
  entryIndex: PoetryEntry;
  entries: PoetryEntry[];
}

const { entryIndex, entries } = Astro.props;

// Get a preview snippet of the poem
const getPreview = (content: string, length: number = 100) => {
  return content ? plainify(content).slice(0, length) + "..." : "";
};

// Get all unique tags from entries
const allTags = [...new Set(entries.flatMap(entry => entry.data.tags || []))];

// Get all unique categories from entries
const allCategories = entries
  .map(entry => entry.data.category)
  .filter((category): category is string => typeof category === 'string');
const uniqueCategories = [...new Set(allCategories)];
---

<BaseLayout title={entryIndex.data.title} description={entryIndex.data.description}>
  <PageHeader title={entryIndex.data.title} />
  <section class="section">
    <div class="container">
      <!-- Filter controls -->
      {allTags.length > 0 && (
        <div class="mb-8">
          <h3 class="text-lg font-semibold mb-2">Tags</h3>
          <div class="flex flex-wrap gap-2">
            {allTags.map(tag => (
              <button class="px-3 py-1 rounded-full bg-primary/10 text-primary hover:bg-primary/20 transition-colors">
                #{tag}
              </button>
            ))}
          </div>
        </div>
      )}
      
      {uniqueCategories.length > 0 && (
        <div class="mb-8">
          <h3 class="text-lg font-semibold mb-2">Categories</h3>
          <div class="flex flex-wrap gap-2">
            {uniqueCategories.map(category => (
              <button class="px-3 py-1 rounded-full bg-secondary/10 text-secondary hover:bg-secondary/20 transition-colors">
                {category}
              </button>
            ))}
          </div>
        </div>
      )}

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {entries.map((entry) => (
          <a 
            href={`/poetry/${entry.id}`}
            class="glass rounded-lg overflow-hidden transition-all duration-300 hover:transform hover:-translate-y-1 hover:shadow-lg intersect:animate-fadeUp opacity-0"
          >
            <article>
              <div class="aspect-[16/9] w-full overflow-hidden">
                {entry.data.image ? (
                  <Image
                    src={entry.data.image}
                    alt={(entry.data.imageAlt || entry.data.title || 'Untitled poem') as string}
                    class="w-full h-full object-cover"
                    width={800}
                    height={450}
                  />
                ) : (
                  <DefaultImage title={entry.data.title} />
                )}
              </div>
              <div class="p-6">
                <h3 class="text-xl font-semibold font-secondary text-txt-p dark:text-darkmode-txt-p mb-2">
                  {entry.data.title}
                </h3>
                
                {entry.data.date && (
                  <div class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    {formatDate(entry.data.date)}
                  </div>
                )}
                
                {entry.data.tags && entry.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-1 mb-3">
                    {entry.data.tags.map(tag => (
                      <span class="text-xs px-2 py-1 rounded-full bg-primary/10 text-primary">
                        #{tag}
                      </span>
                    ))}
                  </div>
                )}
                
                {entry.data.category && (
                  <div class="text-sm mb-3">
                    <span class="px-2 py-1 rounded-full bg-secondary/10 text-secondary">
                      {entry.data.category}
                    </span>
                  </div>
                )}
                
                <p class="text-gray-600 dark:text-gray-400 text-sm line-clamp-3">
                  {getPreview(entry.body || "")}
                </p>
                
                {entry.data.audioUrl && (
                  <div class="mt-3">
                    <span class="text-sm text-primary flex items-center gap-1">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                      </svg>
                      Audio available
                    </span>
                  </div>
                )}
              </div>
            </article>
          </a>
        ))}
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
